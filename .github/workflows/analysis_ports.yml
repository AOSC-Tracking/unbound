name: Analysis and Ports

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'Start analysis and port workflow'
        default: 'yes'
        required: true

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
# temporarily commented out to speed up build.
#          - name: GCC on Linux
#            os: ubuntu-latest
#            config: "--enable-debug --disable-flto"
#            make_test: "yes"
#          - name: Clang-analyzer
#            os: ubuntu-latest
#            config: "CC=clang --enable-debug --disable-flto --disable-static"
#            make_test: "yes"
#            clang_analysis: "yes"
#          - name: libevent
#            os: ubuntu-latest
#            install_libevent: "yes"
#            config: "CC=clang --enable-debug --disable-flto --with-libevent --disable-static"
#            make_test: "yes"
#            clang_analysis: "yes"
#          - name: OS X
#            os: macos-latest
#            install_expat: "yes"
#            config: "--enable-debug --disable-flto --with-ssl=/usr/local/opt/openssl --with-libexpat=/usr/local/opt/expat"
#            make_test: "yes"
#          - name: Clang on OS X
#            os: macos-latest
#            install_expat: "yes"
#            config: "CC=clang --enable-debug --disable-flto --with-ssl=/usr/local/opt/openssl --with-libexpat=/usr/local/opt/expat --disable-static"
#            make_test: "yes"
#            clang_analysis: "yes"
#          - name: ubsan (gcc undefined behaviour sanitizer)
#            os: ubuntu-latest
#            config: 'CFLAGS="-DNDEBUG -g2 -O3 -fsanitize=undefined -fno-sanitize-recover=all" --disable-flto --disable-static'
#            make_test: "yes"
#          - name: asan (gcc address sanitizer)
#            os: ubuntu-latest
#            config: 'CFLAGS="-DNDEBUG -g2 -O3 -fsanitize=address" --disable-flto --disable-static'
#            make_test: "yes"
          - name: Apple iPhone on iOS, armv7
            os: macos-latest
            AUTOTOOLS_HOST: armv7-apple-ios
            OPENSSL_HOST: ios-cross
            IOS_SDK: iPhoneOS
            IOS_CPU: armv7s
            test_ios: "yes"
            config: "no"
            make: "no"
 
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: false
      - name: test ios
        if: ${{ matrix.test_ios == 'yes' }}
        env:
          AUTOTOOLS_HOST: ${{ matrix.AUTOTOOLS_HOST }}
          OPENSSL_HOST: ${{ matrix.OPENSSL_HOST }}
          IOS_SDK: ${{ matrix.IOS_SDK }}
          IOS_CPU: ${{ matrix.IOS_CPU }}
        run: |
          #(already installed) ./contrib/ios/install_tools.sh
          export AUTOTOOLS_BUILD="$(./config.guess)"
          echo AUTOTOOLS_BUILD=${AUTOTOOLS_BUILD}
          export IOS_PREFIX="$HOME/$IOS_SDK-$IOS_CPU"
          echo IOS_PREFIX=${IOS_PREFIX}
          export PKG_CONFIG_PATH="$IOS_PREFIX/lib/pkgconfig"
          echo PKG_CONFIG_PATH=${PKG_CONFIG_PATH}
          export CONFIG_OPTS="--build=$AUTOTOOLS_BUILD --host=$AUTOTOOLS_HOST --prefix=$IOS_PREFIX --with-ssl=$IOS_PREFIX --disable-gost --with-libexpat=$IOS_PREFIX"
          echo CONFIG_OPTS=${CONFIG_OPTS}
          echo "::group::setenv_ios.sh"
          echo "./contrib/ios/setenv_ios.sh"
          source ./contrib/ios/setenv_ios.sh
          echo "::endgroup::"
          echo "::group::install_openssl"
          echo "./contrib/ios/install_openssl.sh"
          ./contrib/ios/install_openssl.sh
          echo "::endgroup::"
          echo "::group::install_expat"
          echo "./contrib/ios/install_expat.sh"
          ./contrib/ios/install_expat.sh
          echo "::endgroup::"
          echo "::group::configure"
          echo "./configure ${CONFIG_OPTS}"
          ./configure ${CONFIG_OPTS}
          echo "::endgroup::"
          echo "::group::make"
          # make is here to preserve environment variables
          make
          echo "::endgroup::"
          echo "::group::make install"
          make install
          echo "::endgroup::"
      - name: install libevent
        if: ${{ matrix.install_libevent == 'yes' }}
        run: sudo apt-get install libevent-dev
      - name: install expat
        if: ${{ matrix.install_expat == 'yes' }}
        run: brew install expat
      - name: configure
        if: ${{ matrix.config != 'no' }}
        run: ./configure ${{ matrix.config }}
      - name: make
        if: ${{ matrix.make != 'no' }}
        run: make
      - name: make test
        if: ${{ matrix.make_test == 'yes' }}
        run: make test
      - name: clang-analysis
        if: ${{ matrix.clang_analysis == 'yes' }}
        run: (cd testdata/clang-analysis.tdir; bash clang-analysis.test)
